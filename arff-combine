#!/usr/bin/env python3
# Author: Pawel Foremski <pjf@iitis.pl>
# Copyright (C) 2013 IITiS PAN <http://www.iitis.pl/>
# Licensed under GNU GPL v3

import sys
import argparse
from ArffReader import *

def main(args, todo):
	readers = []
	rcols = []

	# open input files
	for f,c in todo:
		f = open(f, "r") if f != "-" else sys.stdin

		r = ArffReader(f)
		readers.append(r)

		if c == "*":
			rcols.append(r.fields)
		else:
			rcols.append([s.strip() for s in c.split(',')])

	# emit the header
	print("%% arff-combine %s" % " ".join(sys.argv[1:]))
	print("@relation %s" % readers[0].relation)
	for i,r,cols in zip(range(len(readers)), readers,rcols):
		for c in cols:
			# avoid name collisions
			if i > 0 and not args.clash:
				name = str(i+1) + c
			else:
				name = c
			print("@attribute %s %s" % (name, r.types[c]))
	print("@data")

	# read line-by-line
	t = {"'":"\\'", "\\":"\\\\"}
	read = 0
	dropped = 0
	for d in readers[0]:
		fid = d[args.id]
		read += 1

		data = [d]
		for r,cols in zip(readers[1:], rcols[1:]):
			try:
				d = r.seek(fid, cols, args.id)
				data.append(d)
			except:
				d = None
				break

		if not d:
			dropped += 1
			continue

		# select columns, quote string values
		res = []
		for src,d,cols in zip(readers, data, rcols):
			for c in cols:
				if src.types[c] == "string":
					res.append("'" + ''.join(t.get(ch,ch) for ch in d[c]) + "'")
				else:
					res.append(d[c])

		# print the result
		print(",".join(res))

	sys.stderr.write("%% read %d lines, dropped %d\n" % (read, dropped))

if __name__ == "__main__":
	p = argparse.ArgumentParser(description='Combine ARFF files by first column', epilog='''
		E.g. in order to combine columns c1 and c2 from file1 and
		column c3 from file2, use
		%(prog)s ./file1 c1,c2 ./file2 c3''')
	p.add_argument('src', nargs='+', help='input definitions')
	p.add_argument('--clash', action='store_true', help='dont alter column names')
	p.add_argument('--id', default='fc_id', help='index column')
	p.add_argument("--exe", help="exec given Python file first")
	args = p.parse_args()

	if args.exe: exec(open(args.exe).read())

	l = [x for x in enumerate(args.src)]
	todo = zip([x for i,x in l if i%2==0], [x for i,x in l if i%2==1])

	main(args, todo)
